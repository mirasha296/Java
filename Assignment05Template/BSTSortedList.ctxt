#BlueJ class context
comment0.target=BSTSortedList
comment1.params=
comment1.target=BSTSortedList()
comment10.params=
comment10.target=boolean\ isEmpty()
comment10.text=\ Sees\ whether\ this\ list\ is\ empty.\n@return\ \ True\ if\ the\ list\ is\ empty,\ or\ false\ if\ not.
comment11.params=
comment11.target=java.lang.Comparable[]\ toArray()
comment11.text=\ Retrieves\ all\ entries\ that\ are\ in\ this\ list\ in\ the\ order\ in\ which\n\ \ \ \ they\ occur\ in\ the\ list.\n\ \ \ \ @return\ \ A\ newly\ allocated\ array\ of\ all\ the\ entries\ in\ the\ list.\nIf\ the\ list\ is\ empty,\ the\ returned\ array\ is\ empty.
comment2.params=newEntry
comment2.target=void\ add(java.lang.Comparable)
comment3.params=anEntry
comment3.target=boolean\ remove(java.lang.Comparable)
comment3.text=\ Removes\ the\ first\ or\ only\ occurrence\ of\ a\ specified\ entry\n\ \ \ \ from\ this\ sorted\ list.\n\ \ \ \ @param\ anEntry\ \ The\ object\ to\ be\ removed.\n\ \ \ \ @return\ \ True\ if\ anEntry\ was\ located\ and\ removed;\ \notherwise\ returns\ false.
comment4.params=givenPosition
comment4.target=java.lang.Comparable\ remove(int)
comment4.text=\ Removes\ the\ entry\ at\ a\ given\ position\ from\ this\ list.\n\ Entries\ originally\ at\ positions\ higher\ than\ the\ given\n\ position\ are\ at\ the\ next\ lower\ position\ within\ the\ list,\n\ and\ the\ list's\ size\ is\ decreased\ by\ 1.\n\ \ \ \ @param\ givenPosition\ \ An\ integer\ that\ indicates\ the\ position\ of\n\ \ \ \ the\ entry\ to\ be\ removed.\n\ \ \ \ @return\ \ A\ reference\ to\ the\ removed\ entry.\n\ \ \ \ @throws\ \ IndexOutOfBoundsException\ if\ either\ \ngivenPosition\ <\ 1\ or\ givenPosition\ >\ getLength().
comment5.params=givenPosition
comment5.target=java.lang.Comparable\ getEntry(int)
comment5.text=\ Retrieves\ the\ entry\ at\ a\ given\ position\ in\ this\ list.\n\ \ \ \ @param\ givenPosition\ \ An\ integer\ that\ indicates\ the\ position\ of\n\ \ \ \ the\ desired\ entry.\n\ \ \ \ @return\ \ A\ reference\ to\ the\ indicated\ entry.\n@throws\ \ IndexOutOfBoundsException\ if\ either\ givenPosition\ <\ 1\ or\ givenPosition\ >\ getLength().
comment6.params=anEntry
comment6.target=int\ getPosition(java.lang.Comparable)
comment6.text=\ Gets\ the\ position\ of\ an\ entry\ in\ this\ sorted\ list.\n\ \ \ \ @param\ anEntry\ \ The\ object\ to\ be\ found.\n\ \ \ \ @return\ \ The\ position\ of\ the\ first\ or\ only\ occurrence\ of\ anEntry\n\ \ \ \ if\ it\ occurs\ in\ the\ list;\ otherwise\ returns\ the\ position\n\ \ \ \ where\ anEntry\ would\ occur\ in\ the\ list,\ but\ as\ a\ negative\ninteger.
comment7.params=anEntry
comment7.target=boolean\ contains(java.lang.Comparable)
comment7.text=\ Sees\ whether\ this\ list\ contains\ a\ given\ entry.\n\ \ \ \ @param\ anEntry\ \ The\ object\ that\ is\ the\ desired\ entry.\n@return\ \ True\ if\ the\ list\ contains\ anEntry,\ or\ false\ if\ not.
comment8.params=
comment8.target=void\ clear()
comment8.text=Removes\ all\ entries\ from\ this\ list.
comment9.params=
comment9.target=int\ getLength()
comment9.text=\ Gets\ the\ length\ of\ this\ list.\n@return\ \ The\ integer\ number\ of\ entries\ currently\ in\ the\ list.
numComments=12
